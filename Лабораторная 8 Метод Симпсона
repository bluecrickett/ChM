//Лабораторная 8
//Метод Симпсона
#include <iostream>
#include <math.h>
using namespace std;
#define pi 3.1415926535

double integral(double x) {
return tan(x);
}

int main() {
    setlocale(LC_ALL, "Russian");
    int n,shetchik=1;
    double h, integ, i = 0, s = 0;
    cout << "Программа вычисляет интеграл tan(x) на отрезке [0;П/3] методом Симпсона\n" << "Введите количество разбиений отрезка:";
    cin >> n;
    s = s + integral(0) + integral(pi / 3);
    h = (pi / 3) / n;
    i = i + h;
    while (i < (pi / 3)) {
        if ((shetchik % 2) == 0) {
        s = s + 2 * tan(i);
        }
        else
        {
        s = s + 4 * tan(i);
        }
        shetchik = shetchik + 1;
        i = i + h;
    }
    integ = h/3*(s);
    cout << "Значение интерграла с данным разбиением равно: " << integ;
    return 0;
}

//Лабораторная 8
//Метод Симпсона
#include <iostream>
#include <math.h>
using namespace std;
#define pi 3.1415926535


int main() {
    int n,v=1;
    double h, rez, i = 0, s = 0;
    cout << "Программа вычисляет интеграл tan(x) на отрезке [0;П/3] методом Симпсона\n" 
    << "Введите количество разбиений отрезка:";
    cin >> n;
    s = s + tan(0) + tan(pi / 3); //сложение значений функции на концах отрезка
    h = (pi / 3) / n; //длина отрезка
    i = i + h; //начинаем с первой точки деления не считая начало отрезка
    while (i < (pi / 3)) { 
        if ((v % 2) == 0) { //проверка на четность индекса точки деления
        s = s + 2 * tan(i);
        }
        else
        {
        s = s + 4 * tan(i);
        }
        v = v + 1; //переход к след индексу
        i = i + h; //переход к след точке деления
    }
    rez = h/3*(s);
    cout << "Значение интерграла с данным разбиением равно: " << rez;
    return 0;
}
